
@misc{noauthor_afldocstechnical_detailstxt_nodate,
	title = {{AFL}/docs/technical\_details.txt at master · google/{AFL}},
	url = {https://github.com/google/AFL/blob/master/docs/technical_details.txt},
	abstract = {american fuzzy lop - a security-oriented fuzzer. Contribute to google/AFL development by creating an account on GitHub.},
	language = {en},
	urldate = {2024-04-27},
	journal = {GitHub},
	file = {Snapshot:/Users/drew/Zotero/storage/8ZMRG5Z5/technical_details.html:text/html},
}

@inproceedings{fu_autofz_2023,
	address = {Anaheim, CA},
	title = {autofz: {Automated} {Fuzzer} {Composition} at {Runtime}},
	isbn = {978-1-939133-37-3},
	url = {https://www.usenix.org/conference/usenixsecurity23/presentation/fu-yu-fu},
	booktitle = {32nd {USENIX} {Security} {Symposium} ({USENIX} {Security} 23)},
	publisher = {USENIX Association},
	author = {Fu, Yu-Fu and Lee, Jaehyuk and Kim, Taesoo},
	month = aug,
	year = {2023},
	pages = {1901--1918},
}

@article{eceiza_improving_2023,
	title = {Improving fuzzing assessment methods through the analysis of metrics and experimental conditions},
	volume = {124},
	issn = {0167-4048},
	url = {https://www.sciencedirect.com/science/article/pii/S0167404822003388},
	doi = {https://doi.org/10.1016/j.cose.2022.102946},
	abstract = {Fuzzing is nowadays one of the most widely used bug hunting techniques. By automatically generating malformed inputs, fuzzing aims to trigger unwanted behavior on its target. While fuzzing research has matured considerably in the last years, the evaluation and comparison of different fuzzing proposals remain challenging, as no standard set of metrics, data, or experimental conditions exist to allow such observation. This paper aims to fill that gap by proposing a standard set of features to allow such comparison. For that end, it first reviews the existing evaluation methods in the literature and discusses all existing metrics by evaluating seven fuzzers under identical experimental conditions. After examining the obtained results, it recommends a set of practices –particularly on the metrics to be used–, to allow proper comparison between different fuzzing proposals.},
	journal = {Computers \& Security},
	author = {Eceiza, Maialen and Flores, Jose Luis and Iturbe, Mikel},
	year = {2023},
	keywords = {Evaluation methodology, Fuzzing, Metrics, Security, Software testing},
	pages = {102946},
}

@article{miller_empirical_1990,
	title = {An empirical study of the reliability of {UNIX} utilities},
	volume = {33},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/96267.96279},
	doi = {10.1145/96267.96279},
	abstract = {The following section describes the tools we built to test the utilities. These tools include the fuzz (random character) generator, ptyjig (to test interactive utilities), and scripts to automate the testing process. Next, we will describe the tests we performed, giving the types of input we presented to the utilities. Results from the tests will follow along with an analysis of the results, including identification and classification of the program bugs that caused the crashes. The final section presents concluding remarks, including suggestions for avoiding the types of problems detected by our study and some commentary on the bugs we found. We include an Appendix with the user manual pages for fuzz and ptyjig.},
	number = {12},
	journal = {Commun. ACM},
	author = {Miller, Barton P. and Fredriksen, Lars and So, Bryan},
	month = dec,
	year = {1990},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	pages = {32--44},
}

@inproceedings{guler_cupid_2020,
	title = {Cupid: {Automatic} fuzzer selection for collaborative fuzzing},
	booktitle = {Annual {Computer} {Security} {Applications} {Conference}},
	author = {Güler, Emre and Görz, Philipp and Geretto, Elia and Jemmett, Andrea and Österlund, Sebastian and Bos, Herbert and Giuffrida, Cristiano and Holz, Thorsten},
	year = {2020},
	pages = {360--372},
}

@article{zhu_fuzzing_2022,
	title = {Fuzzing: {A} {Survey} for {Roadmap}},
	volume = {54},
	issn = {0360-0300},
	shorttitle = {Fuzzing},
	url = {https://dl.acm.org/doi/10.1145/3512345},
	doi = {10.1145/3512345},
	abstract = {Fuzz testing (fuzzing) has witnessed its prosperity in detecting security flaws recently. It generates a large number of test cases and monitors the executions for defects. Fuzzing has detected thousands of bugs and vulnerabilities in various applications. Although effective, there lacks systematic analysis of gaps faced by fuzzing. As a technique of defect detection, fuzzing is required to narrow down the gaps between the entire input space and the defect space. Without limitation on the generated inputs, the input space is infinite. However, defects are sparse in an application, which indicates that the defect space is much smaller than the entire input space. Besides, because fuzzing generates numerous test cases to repeatedly examine targets, it requires fuzzing to perform in an automatic manner. Due to the complexity of applications and defects, it is challenging to automatize the execution of diverse applications. In this article, we systematically review and analyze the gaps as well as their solutions, considering both breadth and depth. This survey can be a roadmap for both beginners and advanced developers to better understand fuzzing.},
	number = {11s},
	urldate = {2024-05-01},
	journal = {ACM Computing Surveys},
	author = {Zhu, Xiaogang and Wen, Sheng and Camtepe, Seyit and Xiang, Yang},
	month = sep,
	year = {2022},
	keywords = {automation, Fuzz testing, fuzzing theory, input space, security},
	pages = {230:1--230:36},
	file = {Full Text PDF:/Users/drew/Zotero/storage/M3UADZY5/Zhu et al. - 2022 - Fuzzing A Survey for Roadmap.pdf:application/pdf},
}

@inproceedings{yun_qsym_2018,
	title = {\{{QSYM}\} : {A} {Practical} {Concolic} {Execution} {Engine} {Tailored} for {Hybrid} {Fuzzing}},
	isbn = {978-1-939133-04-5},
	shorttitle = {\{{QSYM}\}},
	url = {https://www.usenix.org/conference/usenixsecurity18/presentation/yun},
	language = {en},
	urldate = {2024-05-01},
	author = {Yun, Insu and Lee, Sangho and Xu, Meng and Jang, Yeongjin and Kim, Taesoo},
	year = {2018},
	pages = {745--761},
	file = {Full Text PDF:/Users/drew/Zotero/storage/IHN3BXWW/Yun et al. - 2018 - QSYM A Practical Concolic Execution Engine Tai.pdf:application/pdf},
}

@misc{noauthor_aflqemu_mode_nodate,
	title = {{AFL}/qemu\_mode at master · google/{AFL}},
	url = {https://github.com/google/AFL/tree/master/qemu_mode},
	urldate = {2024-05-01},
	file = {AFL/qemu_mode at master · google/AFL:/Users/drew/Zotero/storage/HMFG8X3H/qemu_mode.html:text/html},
}

@misc{noauthor_sslab-gatechautofz_2024,
	title = {sslab-gatech/autofz},
	copyright = {MIT},
	url = {https://github.com/sslab-gatech/autofz},
	abstract = {autofz: Automated Fuzzer Composition at Runtime},
	urldate = {2024-05-01},
	publisher = {gts3.org (SSLab@Gatech)},
	month = apr,
	year = {2024},
	note = {original-date: 2023-02-22T19:41:07Z},
}

@misc{noauthor_fuyu0425autofz_nodate,
	title = {fuyu0425/autofz - {Docker} {Image} {\textbar} {Docker} {Hub}},
	url = {https://hub.docker.com/r/fuyu0425/autofz},
	urldate = {2024-05-01},
}
